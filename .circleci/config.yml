version: 2.1

orbs:
    slack: circleci/slack@4.4.4
    secrethub: secrethub/cli@1.1.0
    gh: circleci/github-cli@1.0.5
    aws-cli: circleci/aws-cli@2.0.6
    artifactory-orb: jfrog/artifactory-orb@1.0.1

executors:
    node-lts:
        parameters:
            class:
                description: The resource class
                type: enum
                enum: ["small", "medium", "large", "xlarge"]
                default: "medium"
        docker:
            - image: cimg/node:16.10
        resource_class: << parameters.class >>

    azure-cli:
        parameters:
            resource_class:
                description: The resource class
                type: enum
                enum: ["small", "medium", "large", "xlarge"]
                default: "medium"
        docker:
            # Version can be found here https://docs.microsoft.com/en-us/cli/azure/release-notes-azure-cli
            # be careful when updating the version as it looks it is not following semver
            - image: mcr.microsoft.com/azure-cli:2.34.1
        resource_class: <<parameters.resource_class>>

commands:
    prepare-env-var:
        description: Prepare env variables used in [version.properties] files
        steps:
            - run:
                  name: Prepare env variables
                  command: |
                      export BUILD_ID=${CIRCLE_BUILD_NUM}
                      export BUILD_NUMBER=${CIRCLE_BUILD_NUM}
                      export GIT_COMMIT=$(git rev-parse --short HEAD)

                      # Workaround for sharing this variable to the next steps
                      echo "export BUILD_ID=$BUILD_ID" >> $BASH_ENV
                      echo "export BUILD_NUMBER=$BUILD_NUMBER" >> $BASH_ENV
                      echo "export GIT_COMMIT=$GIT_COMMIT" >> $BASH_ENV

    restore-maven-cache:
        description: Restore Maven cache
        steps:
            - restore_cache:
                  keys:
                      - gravitee-api-management-v6-{{ checksum ".apim-version.txt" }}

    save-maven-cache:
        description: "Save maven cache for the workflow. We only save external dependencies to force gravitee artefacts download"
        steps:
            - run:
                  name: "Exclude Gravitee internal dependencies from cache"
                  command: |
                      if [ -d ~/.m2/io/gravitee ]; then
                        rm -rf ~/.m2/io/gravitee
                      fi;
                      if [ -d ~/.m2/com/graviteesource ]; then
                        rm -rf ~/.m2/com/graviteesource
                      fi;
            - save_cache:
                  paths:
                      - ~/.m2
                  key: gravitee-api-management-v6-{{ checksum ".apim-version.txt" }}
                  when: always

    notify-on-failure:
        steps:
            - slack/notify:
                  branch_pattern: master
                  event: fail
                  template: basic_fail_1

    get-apim-tag:
        steps:
            - run:
                  name: Read tag of Docker images to deploy
                  command: |
                      export TAG=$(cat ./.docker-tag.txt)
                      # Workaround for sharing this variable to the next steps
                      echo "export TAG=$TAG" >> $BASH_ENV

    get-apim-version:
        steps:
            - run:
                  name: Read APIM version
                  command: |
                      export APIM_VERSION=$(cat ./.apim-version.txt)
                      # Workaround for sharing this variable to the next steps
                      echo "export APIM_VERSION=$APIM_VERSION" >> $BASH_ENV

    prepare-gpg:
        description: Prepare GPG command
        steps:
            - secrethub/install
            - run:
                  command: |
                      secrethub read graviteeio/cicd/graviteebot/gpg/armor_format_pub_key -o pub.key
                      gpg --import pub.key

                      secrethub read graviteeio/cicd/graviteebot/gpg/armor_format_private_key -o private.key
                      # Need --batch to be able to import private key
                      gpg --import --batch private.key

    webui-install:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
        steps:
            - restore_cache:
                  name: Restore NPM cache
                  keys:
                      - << parameters.apim-ui-project >>-cache-v1-{{ checksum "<< parameters.apim-ui-project >>/package-lock.json" }}
                      - << parameters.apim-ui-project >>-cache-v1
            - run:
                  name: Install dependencies
                  command: npm install
                  working_directory: << parameters.apim-ui-project >>
            - save_cache:
                  name: Save NPM cache
                  key: << parameters.apim-ui-project >>-cache-v1-{{ checksum "<< parameters.apim-ui-project >>/package-lock.json" }}
                  paths:
                      - ./<< parameters.apim-ui-project >>/node_modules

parameters:
    gio_action:
        type: enum
        enum: [release, standalone_release, standalone_release_replay, nexus_staging, pull_requests, build_docker_images]
        default: pull_requests
    dry_run:
        type: boolean
        default: true
        description: "Run in dry run mode?"
    maven_profile_id:
        type: string
        default: "gravitee-dry-run"
        description: "Maven ID of the Maven profile to use for a dry run ?"
    secrethub_org:
        type: string
        default: "graviteeio"
        description: "SecretHub Org to use to fetch secrets ?"
    secrethub_repo:
        type: string
        default: "cicd"
        description: "SecretHub Repo to use to fetch secrets ?"
    s3_bucket_name:
        type: string
        default: ""
        description: "Name of the S3 Bucket used to store and retrieve the state of the maven project, to perform the nexus staging ?"
    replayed_release:
        type: string
        default: ""
        description: "What is the version number of the release you want to replay? (Mandatory, only for the 'standalone_release_replay' Workflow / see 'gio_action' pipeline parameter)"
    docker_tag_as_latest:
        default: false
        type: boolean
        description: "Is this version the latest version available ?"
    graviteeio_version:
        default: ""
        type: string
        description: "Version of APIM to be used in docker images"

jobs:
    setup:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: small
        environment:
            MAVEN_SETTINGS: "secrethub://graviteeio/cicd/graviteebot/infra/maven/gravitee.settings.xml"
        steps:
            - checkout
            - secrethub/exec:
                  command: echo $MAVEN_SETTINGS > .gravitee.settings.xml
            - restore_cache:
                  name: Restore Maven cache for compute-tag job
                  keys:
                      - gravitee-api-management-compute-tag-{{ .Branch }}-{{ checksum "pom.xml" }}
            - run:
                  name: Compute APIM Version
                  command: |
                      export APIM_VERSION=$(mvn -s .gravitee.settings.xml -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
                      echo "export APIM_VERSION=$APIM_VERSION" >> $BASH_ENV
                      echo "Gravitee APIM version: ${APIM_VERSION}"
                      echo $APIM_VERSION > .apim-version.txt

            - run:
                  name: Compute Tag for Docker images
                  command: |
                      export TAG=${CIRCLE_BRANCH}-latest
                      # Workaround for sharing this variable to the next steps
                      echo "export TAG=$TAG" >> $BASH_ENV
                      echo "Docker images will be tagged with: ${TAG}"
                      echo $TAG > .docker-tag.txt
            - save_cache:
                  name: Save Maven cache for compute-tag job
                  paths:
                      - ~/.m2
                  key: gravitee-api-management-compute-tag-{{ .Branch }}-{{ checksum "pom.xml" }}
                  when: always
            - persist_to_workspace:
                  root: .
                  paths:
                      - .gravitee.settings.xml
                      - .docker-tag.txt
                      - .apim-version.txt

    sonarcloud-analysis:
        description: A job that run Sonarcloud analysis
        parameters:
            working_directory:
                description: "Directory where the Sonarcloud analysis will be run"
                default: "gravitee-apim-rest-api"
                type: string
        docker:
            - image: sonarsource/sonar-scanner-cli
        resource_class: large
        steps:
            - run:
                  name: Add SSH tool
                  command: apk add --no-cache openssh
            - checkout
            - attach_workspace:
                  at: .
            - secrethub/env-export:
                  secret-path: graviteeio/cicd/graviteebot/infra/sonarcloud.io.token
                  var-name: SONAR_TOKEN
            - get-apim-version
            - run:
                  name: Run Sonarcloud Analysis
                  command: sonar-scanner -Dsonar.projectVersion=${APIM_VERSION}
                  working_directory: << parameters.working_directory >>
            - notify-on-failure

    validate:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: small
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - run:
                  name: "validate project"
                  command: |
                      mvn -s .gravitee.settings.xml validate --no-transfer-progress -T 2C

            - notify-on-failure
            - save-maven-cache

    build:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - prepare-env-var
            - run:
                  name: "Build project"
                  command: |
                      mvn -s .gravitee.settings.xml clean package --no-transfer-progress -DskipTests -Dskip.validation=true -T 2C -P distribution-dev
                      mkdir -p ./rest-api-docker-context/distribution && cp -r ./gravitee-apim-rest-api/gravitee-apim-rest-api-standalone/gravitee-apim-rest-api-standalone-distribution/target/distribution ./rest-api-docker-context/.
                      mkdir -p ./gateway-docker-context/distribution && cp -r ./gravitee-apim-gateway/gravitee-apim-gateway-standalone/gravitee-apim-gateway-standalone-distribution/target/distribution ./gateway-docker-context/.

            - notify-on-failure
            - save-maven-cache
            - persist_to_workspace:
                  root: ./
                  paths:
                      - ./gravitee-*/*/target/*
                      - ./rest-api-docker-context
                      - ./gateway-docker-context

    test:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: xlarge
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - run:
                  name: Run tests
                  command: |
                      mvn -pl 'gravitee-apim-distribution, gravitee-apim-rest-api, gravitee-apim-gateway' -amd --fail-fast -s .gravitee.settings.xml test --no-transfer-progress -Dskip.validation=true -T 2C
            - run:
                  name: Save test results
                  command: |
                      mkdir -p ~/test-results/junit/
                      find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                  when: always
            - notify-on-failure
            - store_test_results:
                  path: ~/test-results
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-gateway/gravitee-apim-gateway-coverage/target/site/jacoco-aggregate/
                      - gravitee-apim-rest-api/gravitee-apim-rest-api-coverage/target/site/jacoco-aggregate/

    test-repository:
        machine:
            image: ubuntu-2004:current
        resource_class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - run:
                  name: Run tests
                  command: |
                      # Need to use `verify` phase to get repo-test's jar build and shared to mongodb and jdbc repos 
                      # and then collect and merge all coverage reports
                      cd gravitee-apim-repository
                      mvn -s ../.gravitee.settings.xml verify --no-transfer-progress -Dskip.validation=true -T 2C
            - run:
                  name: Save test results
                  command: |
                      mkdir -p ~/test-results/junit/
                      find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                  when: always
            - notify-on-failure
            - store_test_results:
                  path: ~/test-results
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-repository/gravitee-apim-repository-coverage/target/site/jacoco-aggregate/

    publish-on-artifactory:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: large
        environment:
            ALT_DEPLOYMENT_REPOSITORY: "artifactory-gravitee::default::https://odbxikk7vo-artifactory.services.clever-cloud.com/gravitee-snapshots"
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - run:
                  name: "Maven Package and deploy to Artifactory ([gravitee-snapshots] repository)"
                  command: |
                      mvn deploy --no-transfer-progress -DskipTests -Dskip.validation=true -T 2C -s .gravitee.settings.xml   -DaltDeploymentRepository=${ALT_DEPLOYMENT_REPOSITORY}
            - save-maven-cache
            - notify-on-failure

    publish-on-nexus:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - run:
                  name: "Maven Package and deploy to Nexus Snapshots"
                  command: |
                      mvn deploy --no-transfer-progress -DskipTests -Dskip.validation=true -T 2C -s .gravitee.settings.xml
            - save-maven-cache
            - notify-on-failure

    publish-images-azure-registry:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: small
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - setup_remote_docker
            - get-apim-tag
            - get-apim-version
            - run:
                  name: Build & Publish Management API and Gateway Docker Image to Azure Registry
                  command: |
                      export REST_API_PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/apim-management-api:${TAG}
                      export GATEWAY_PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/apim-gateway:${TAG}

                      docker build -f gravitee-apim-rest-api/docker/Dockerfile-dev \
                      --build-arg GRAVITEEIO_VERSION=${APIM_VERSION} \
                      -t ${REST_API_PRIVATE_IMAGE_TAG} \
                      rest-api-docker-context

                      docker build -f gravitee-apim-gateway/docker/Dockerfile-dev \
                      --build-arg GRAVITEEIO_VERSION=${APIM_VERSION} \
                      -t ${GATEWAY_PRIVATE_IMAGE_TAG} \
                      gateway-docker-context

                      echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io
                      docker push ${REST_API_PRIVATE_IMAGE_TAG}
                      docker push ${GATEWAY_PRIVATE_IMAGE_TAG}
                      docker logout graviteeio.azurecr.io

            - notify-on-failure

    cypress-install:
        executor:
            name: node-lts
            class: small
        steps:
            - checkout
            - restore_cache:
                  name: Restore NPM cache
                  keys:
                      - gravitee-apim-cypress-cache-v1-{{ checksum "gravitee-apim-cypress/package-lock.json" }}
            - run:
                  name: Install dependencies
                  command: npm install
                  working_directory: gravitee-apim-cypress
            - notify-on-failure
            - save_cache:
                  name: Save NPM cache
                  key: gravitee-apim-cypress-cache-v1-{{ checksum "gravitee-apim-cypress/package-lock.json" }}
                  paths:
                      - ./gravitee-apim-cypress/node_modules
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-cypress/node_modules

    cypress-lint-test:
        executor:
            name: node-lts
            class: medium
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - run:
                  name: Check License
                  command: npm run lint:license
                  working_directory: gravitee-apim-cypress
            - run:
                  name: Run Prettier and ESLint
                  command: npm run lint
                  working_directory: gravitee-apim-cypress
            - run:
                  name: Run unit tests
                  command: echo "Will run 'npm run test:ci' in the future"
                  working_directory: gravitee-apim-cypress
            - notify-on-failure

    webui-lint-test:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
            resource-class:
                type: string
                default: medium
        executor:
            name: node-lts
            class: << parameters.resource-class>>
        steps:
            - checkout
            - webui-install:
                  apim-ui-project: << parameters.apim-ui-project >>
            - attach_workspace:
                  at: .
            - run:
                  name: Check License
                  command: npm run lint:license
                  working_directory: << parameters.apim-ui-project >>
            - run:
                  name: Run Prettier and ESLint
                  command: npm run lint
                  working_directory: << parameters.apim-ui-project >>
            - run:
                  name: Run unit tests
                  command: npm run test:coverage
                  working_directory: << parameters.apim-ui-project >>
            - notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - << parameters.apim-ui-project >>/coverage
            - store_test_results:
                  path: << parameters.apim-ui-project >>/coverage

    webui-publish-artifactory:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
        executor:
            name: node-lts
            class: small
        steps:
            - attach_workspace:
                  at: .
            - get-apim-version
            - artifactory-orb/install
            - artifactory-orb/configure
            - run:
                  name: Rename and zip dist folder
                  command: mv dist << parameters.apim-ui-project >>-${APIM_VERSION%-SNAPSHOT} && zip -r dist.zip << parameters.apim-ui-project >>-${APIM_VERSION%-SNAPSHOT}
                  working_directory: << parameters.apim-ui-project >>
            - when:
                  condition: << pipeline.parameters.dry_run>>
                  steps:
                      - artifactory-orb/upload:
                            source: << parameters.apim-ui-project >>/dist.zip
                            target: dry-run-releases/io/gravitee/apim/ui/<< parameters.apim-ui-project >>/${APIM_VERSION%-SNAPSHOT}/<< parameters.apim-ui-project >>-${APIM_VERSION%-SNAPSHOT}.zip
            - when:
                  condition:
                      not: << pipeline.parameters.dry_run>>
                  steps:
                      - artifactory-orb/upload:
                            source: << parameters.apim-ui-project >>/dist.zip
                            target: gravitee-releases/io/gravitee/apim/ui/<< parameters.apim-ui-project >>/${APIM_VERSION%-SNAPSHOT}/<< parameters.apim-ui-project >>-${APIM_VERSION%-SNAPSHOT}.zip
            - notify-on-failure

    webui-build:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
        executor:
            name: node-lts
            class: large
        steps:
            - checkout
            - webui-install:
                  apim-ui-project: << parameters.apim-ui-project >>
            - run:
                  name: Build
                  command: npm run build:prod
                  environment:
                      NODE_OPTIONS: --max_old_space_size=4086
                      BACKEND_ENV: apim-master
                  working_directory: << parameters.apim-ui-project >>
            - notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - << parameters.apim-ui-project >>/dist

    webui-publish-images-azure-registry:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
            docker-image-name:
                type: string
                default: ""
                description: the name of the docker image to create
        docker:
            - image: cimg/openjdk:11.0
        resource_class: small
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - setup_remote_docker
            - get-apim-tag
            - run:
                  name: Build & Publish Web UI Docker Image to Azure Registry
                  command: |
                      cp -fr docker/config .
                      cp -fr docker/run.sh .

                      export PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/<< parameters.docker-image-name >>:${TAG}
                      docker build -f docker/Dockerfile-dev -t ${PRIVATE_IMAGE_TAG} .

                      echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io
                      docker push ${PRIVATE_IMAGE_TAG}
                      docker logout graviteeio.azurecr.io
                  working_directory: << parameters.apim-ui-project >>
            - notify-on-failure

    console-webui-build-storybook:
        executor:
            name: node-lts
            class: large
        steps:
            - checkout
            - webui-install:
                  apim-ui-project: gravitee-apim-console-webui
            - run:
                  name: Build
                  command: npm run build-storybook
                  working_directory: gravitee-apim-console-webui
                  environment:
                      NODE_OPTIONS: --max_old_space_size=3072
            - notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-console-webui/storybook-static

    console-webui-chromatic-deployment:
        executor:
            class: small
            name: node-lts
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - webui-install:
                  apim-ui-project: gravitee-apim-console-webui
            - secrethub/exec:
                  step-name: Running Chromatic
                  # TODO:
                  #  - Handle npx chromatic command failure, make the job fails
                  #  - Create a new project in Chromatic and update the token
                  command: |
                      SB_URL=$(cd gravitee-apim-console-webui && npx chromatic --project-token=$CHROMATIC_PROJECT_TOKEN --exit-once-uploaded -d=storybook-static | grep -o "View your Storybook at https:\/\/[0-9a-z-]*\.chromatic\.com" | grep -o "https:.*")
                      echo "export SB_URL=$SB_URL" >> $BASH_ENV
            - gh/setup
            - run:
                  name: Edit Pull Request Description
                  command: |
                      # First check there is an associated pull request, otherwise just stop the job here
                      if ! gh pr view --json title;
                      then
                        echo "No PR found for this branch, stopping the job here."
                        exit 0
                      fi

                      # If PR state is different from OPEN
                      if [ "$(gh pr view --json state --jq .state)" != "OPEN" ];
                      then
                        echo "PR is not opened, stopping the job here."
                        exit 0
                      fi

                      export PR_BODY_STORYBOOK_SECTION="
                      <!-- Storybook placeholder -->
                      ---

                      📚&nbsp;&nbsp;View the storybook of this branch [here](${SB_URL})
                      <!-- Storybook placeholder end -->
                      "

                      export CLEAN_BODY=$(gh pr view --json body --jq .body | sed '/Storybook placeholder -->/,/Storybook placeholder end -->/d')

                      gh pr edit --body "$CLEAN_BODY$PR_BODY_STORYBOOK_SECTION"
            - notify-on-failure

    console-webui-deploy-on-azure-storage:
        executor:
            name: azure-cli
            resource_class: small
        steps:
            - attach_workspace:
                  at: .
            - run:
                  name: Login into Azure Storage and upload dist
                  # TODO:
                  #  - Update CircleCI env var AZURE_STORAGE_CONNECTION_STRING (one for Console, one for Portal)
                  command: |
                      export BRANCH_ID=$(echo "$CIRCLE_BRANCH" | sed -E 's/[~^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr "[:upper:]" "[:lower:]" | cut -c -60)
                      az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
                      CONTAINER_EXISTS=$(az storage container exists -n $BRANCH_ID | jq .exists)
                      if [ "$CONTAINER_EXISTS" = false ] ; then
                        echo "Creating container $BRANCH_ID"
                        az storage container create -n $BRANCH_ID --public-access blob
                      fi             
                      az storage blob upload-batch --overwrite true -s gravitee-apim-console-webui/dist -d $BRANCH_ID --overwrite
            - notify-on-failure

    console-webui-comment-pr-after-deployment:
        executor:
            name: node-lts
            class: small
        steps:
            - checkout
            - gh/setup
            - run:
                  name: Edit Pull Request Description
                  command: |
                      # First check there is an associated pull request, otherwise just stop the job here
                      if ! gh pr view --json title;
                      then
                        echo "No PR found for this branch, stopping the job here."
                        exit 0
                      fi

                      # If PR state is different from OPEN
                      if [ "$(gh pr view --json state --jq .state)" != "OPEN" ];
                      then
                        echo "PR is not opened, stopping the job here."
                        exit 0
                      fi
                      export BRANCH_ID=$(echo "$CIRCLE_BRANCH" | sed -E 's/[~^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr "[:upper:]" "[:lower:]" | cut -c -60)
                      export PR_BODY_UI_SECTION="
                      <!-- UI placeholder -->
                      🚀 CI was able to deploy the build of this PR, so you can now try it directly [here](https://apimnightlywebui24386.blob.core.windows.net/${BRANCH_ID}/index.html)
                      _Notes_: The deployed app is linked to the management API of APIM master. (Same login and password as APIM master)
                      <!-- UI placeholder end -->
                      "

                      export CLEAN_BODY=$(gh pr view --json body --jq .body | sed '/UI placeholder -->/,/UI placeholder end -->/d')

                      gh pr edit --body "$CLEAN_BODY$PR_BODY_UI_SECTION"

            - notify-on-failure

    purge-master-azure-registry:
        executor:
            name: azure-cli
            resource_class: small
        steps:
            - run:
                  name: 🗑 Let's purge all master Apim images older than 1d
                  # TODO:
                  #  - Improve purge of other images and branches
                  command: |
                      az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
                      az acr run --cmd "acr purge --filter 'apim-management-ui:master-.*' --untagged --ago 1d --keep 3" --registry graviteeio /dev/null
            - notify-on-failure

    deploy-on-azure-cluster:
        executor:
            name: azure-cli
            resource_class: small
        steps:
            - attach_workspace:
                  at: .
            - get-apim-tag
            - run:
                  name: Install Kubectl
                  command: |
                      curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
                      chmod +x ./kubectl
                      mv ./kubectl /usr/local/bin/kubectl
                      kubectl version --client=true
            - run:
                  name: Restart APIM cluster pods
                  command: |
                      export K8S_NAME=apim-${CIRCLE_BRANCH//\./-}
                      export K8S_NAMESPACE=apim-${CIRCLE_BRANCH//\./-}

                      az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
                      az aks get-credentials --resource-group apim-hprod --name apim-hprod

                      kubectl rollout restart deployment/${K8S_NAME}-apim3-api -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/${K8S_NAME}-apim3-portal -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/${K8S_NAME}-apim3-ui -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/${K8S_NAME}-apim3-gateway -n ${K8S_NAMESPACE}

            - notify-on-failure

    ## Release Jobs

    release-prepare-version:
        docker:
            - image: cimg/openjdk:11.0.13
        resource_class: small
        steps:
            - checkout
            - run:
                  name: Remove `-SNAPSHOT` from versions
                  command: mvn -B versions:set -DremoveSnapshot=true -DgenerateBackupPoms=false
            - run:
                  name: Compute APIM Version
                  command: |
                      export APIM_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
                      echo "export APIM_VERSION=$APIM_VERSION" >> $BASH_ENV
                      echo "Gravitee APIM version: ${APIM_VERSION}"
                      echo $APIM_VERSION > .apim-version.txt
            - persist_to_workspace:
                  root: .
                  paths:
                      - .apim-version.txt

    backend-build-and-publish-artifactory:
        docker:
            - image: cimg/openjdk:11.0.13
        resource_class: large
        environment:
            DRY_RUN: << pipeline.parameters.dry_run >>
            MAVEN_PROFILE_ID: << pipeline.parameters.maven_profile_id >>
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - run:
                  name: Remove `-SNAPSHOT` from versions
                  command: mvn -B versions:set -DremoveSnapshot=true -DgenerateBackupPoms=false
            - run:
                  name: Update maven dependencies versions from properties
                  command: |
                      mvn versions:update-properties --batch-mode -Dmaven.version.rules.serverId=artifactory-gravitee -Dincludes="io.gravitee.*:*" -DallowMajorUpdates=false -DallowMinorUpdates=false -DallowIncrementalUpdates=true -DgenerateBackupPoms=false -Dexcludes="io.gravitee.policy:*,io.gravitee.connector:*,io.gravitee.resource:*,io.gravitee.service:*,io.gravitee.fetcher:*,io.gravitee.tracer:*,io.gravitee.repository:*,io.gravitee.reporter:*,io.gravitee.cockpit:*,io.gravitee.discovery:*,io.gravitee.notifier:*,com.graviteesource.notifier:*,com.graviteesource.policy:*" --settings .gravitee.settings.xml --update-snapshots -T 2C
            - prepare-gpg
            - prepare-env-var
            - run:
                  name: Maven deploy to Gravitee's private Artifactory"
                  command: |
                      echo "  MAVEN_PROFILE_ID=[${MAVEN_PROFILE_ID}]  "
                      mvn -Duser.home=${HOME} --settings .gravitee.settings.xml -B -U -P ${MAVEN_PROFILE_ID} clean deploy -DskipTests=true -Dskip.validation
            - save-maven-cache

    release-commit-and-prepare-next-version:
        docker:
            - image: cimg/openjdk:11.0.13
        resource_class: large

        environment:
            DRY_RUN: << pipeline.parameters.dry_run >>
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - add_ssh_keys:
                  fingerprints:
                      - "ac:88:23:8f:c6:0f:7d:f0:fc:df:73:20:34:56:02:6c"
            - run:
                  name: Git config
                  command: |
                      git config --global user.name "${GIT_USER_NAME}"
                      git config --global user.email "${GIT_USER_EMAIL}"
            - run:
                  name: Remove `-SNAPSHOT` from versions
                  command: mvn -B versions:set -DremoveSnapshot=true -DgenerateBackupPoms=false
            - run:
                  name: Git release
                  command: |
                      export MVN_PRJ_VERSION=$(mvn exec:exec -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive --quiet --settings .gravitee.settings.xml)
                      export MVN_PRJ_VERSION_MAJOR=$(echo $MVN_PRJ_VERSION | awk -F '.' '{print $1}')
                      export MVN_PRJ_VERSION_MINOR=$(echo $MVN_PRJ_VERSION | awk -F '.' '{print $2}')
                      export MVN_PRJ_VERSION_PATCH=$(echo $MVN_PRJ_VERSION | awk -F '.' '{print $3}')

                      export CURRENT_GIT_BRANCH=$(git branch --show-current)
                      export MAINTENANCE_GIT_BRANCH="${MVN_PRJ_VERSION_MAJOR}.${MVN_PRJ_VERSION_MINOR}.x"
                      export GIT_BRANCH_FILTER=$(git branch -a | grep "${MAINTENANCE_GIT_BRANCH}")

                      git add --update
                      git commit -m "${MVN_PRJ_VERSION}"
                      git tag ${MVN_PRJ_VERSION}

                      # If support branch for this version does not exist, create it, update versions, commit and push
                      if [ "x${GIT_BRANCH_FILTER}" == "x" ]; then
                        git checkout -b ${MAINTENANCE_GIT_BRANCH}
                        # Set the version to the next support version (bump patch version + '-SNAPSHOT')                        
                        mvn versions:set --batch-mode -DnextSnapshot=true -DgenerateBackupPoms=false --settings .gravitee.settings.xml
                        git add --update
                        git commit -m 'chore: prepare next version [skip ci]'
                        if [ "${DRY_RUN}" == "false" ]; then
                          echo "# --->>> NO IT IS NOT A DRY RUN : GIT PUSH"
                          git push -u origin ${MAINTENANCE_GIT_BRANCH}
                          git push --tags origin ${MAINTENANCE_GIT_BRANCH}
                        else
                          echo "# --->>> THIS IS A DRY RUN : SKIPPPING GIT PUSH"
                        fi;
                        git checkout ${CURRENT_GIT_BRANCH}
                      fi;

                      # If releasing a feature version (i.e. patch number == 0) then bump the minor version for the next 
                      if [ "${MVN_PRJ_VERSION_PATCH}" == "0" ]; then
                        export NEXT_MINOR_VERSION=$((${MVN_PRJ_VERSION_MINOR}+1))
                        export NEXT_SNAPSHOT_VERSION="${MVN_PRJ_VERSION_MAJOR}.${NEXT_MINOR_VERSION}.0-SNAPSHOT"
                        mvn versions:set --batch-mode -DnewVersion=${NEXT_SNAPSHOT_VERSION} -DgenerateBackupPoms=false --settings .gravitee.settings.xml
                      else
                        # Else just set the version to the next support version (bump patch version + '-SNAPSHOT')                        
                        mvn versions:set --batch-mode -DnextSnapshot=true -DgenerateBackupPoms=false --settings .gravitee.settings.xml
                      fi;
                      git add --update
                      git commit -m 'chore: prepare next version [skip ci]'
                      if [ "${DRY_RUN}" == "false" ]; then
                        echo "# --->>> NO IT IS NOT A DRY RUN"
                        echo " so that CURRENT_GIT_BRANCH=MAINTENANCE_GIT_BRANCH"
                        git push -u origin ${CURRENT_GIT_BRANCH}
                        git push --tags origin ${CURRENT_GIT_BRANCH}
                      else
                        echo "# --->>> THIS IS A DRY RUN"
                      fi;

    publish_prod_docker_images:
        parameters:
            dry_run:
                default: true
                type: boolean
            docker_tag_as_latest:
                default: false
                type: boolean
            enterprise_edition:
                default: false
                type: boolean
            graviteeio_version:
                default: ""
                type: string
        docker:
            - image: cimg/base:stable
        environment:
            GRAVITEEIO_VERSION: << parameters.graviteeio_version >>
        steps:
            - setup_remote_docker
            - checkout
            - secrethub/install
            - run:
                  name: "Parse GRAVITEEIO_VERSION to extract major, minor and patch version"
                  command: |
                      export GRAVITEEIO_VERSION_MAJOR=$(echo "${GRAVITEEIO_VERSION}" | awk -F '.' '{print $1}')
                      echo "export GRAVITEEIO_VERSION_MAJOR=${GRAVITEEIO_VERSION_MAJOR}" >> $BASH_ENV

                      export GRAVITEEIO_VERSION_MINOR=$(echo "${GRAVITEEIO_VERSION}" | awk -F '.' '{print $2}')
                      echo "export GRAVITEEIO_VERSION_MINOR=${GRAVITEEIO_VERSION_MINOR}" >> $BASH_ENV

                      export GRAVITEEIO_VERSION_PATCH=$(echo "${GRAVITEEIO_VERSION}" | awk -F '.' '{print $3}')
                      echo "export GRAVITEEIO_VERSION_PATCH=${GRAVITEEIO_VERSION_PATCH}" >> $BASH_ENV
            - run:
                  name: "Build & Publish Gravitee.io APIM Docker images <<# parameters.enterprise_edition >>- Enterprise Edition<</ parameters.enterprise_edition >>"
                  command: |
                      if [ "<< parameters.enterprise_edition >>" == "false" ]; then
                        export DOCKER_TAG_SUFFIX=""
                        export DOCKER_BUILD_ARGS="--build-arg GRAVITEEIO_VERSION=${GRAVITEEIO_VERSION} --build-arg GRAVITEEIO_DOWNLOAD_URL=https://download.gravitee.io/graviteeio-apim/distributions"
                      else
                        export DOCKER_TAG_SUFFIX="-ee"
                        export DOCKER_BUILD_ARGS="--build-arg GRAVITEEIO_VERSION=${GRAVITEEIO_VERSION} --build-arg GRAVITEEIO_DOWNLOAD_URL=https://download.gravitee.io/graviteeio-ee/apim/distributions --build-arg GRAVITEEIO_PACKAGE_NAME=graviteeio-ee-full"
                      fi

                      # always create x.y(-ee)?, x.y.z(-ee)? tags
                      export DOCKER_BUILD_GATEWAY_TAG="       -t graviteeio/apim-gateway:${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}${DOCKER_TAG_SUFFIX}        -t graviteeio/apim-gateway:${GRAVITEEIO_VERSION}${DOCKER_TAG_SUFFIX}"
                      export DOCKER_BUILD_MANAGEMENT_API_TAG="-t graviteeio/apim-management-api:${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}${DOCKER_TAG_SUFFIX} -t graviteeio/apim-management-api:${GRAVITEEIO_VERSION}${DOCKER_TAG_SUFFIX}"
                      export DOCKER_BUILD_MANAGEMENT_UI_TAG=" -t graviteeio/apim-management-ui:${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}${DOCKER_TAG_SUFFIX}  -t graviteeio/apim-management-ui:${GRAVITEEIO_VERSION}${DOCKER_TAG_SUFFIX}"
                      export DOCKER_BUILD_PORTAL_UI_TAG="     -t graviteeio/apim-portal-ui:${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}${DOCKER_TAG_SUFFIX}      -t graviteeio/apim-portal-ui:${GRAVITEEIO_VERSION}${DOCKER_TAG_SUFFIX}"

                      # only create x(-ee)? tag if it's the latest version
                      if [ "<< parameters.docker_tag_as_latest >>" == "true" ]; then
                        DOCKER_BUILD_GATEWAY_TAG+="        -t graviteeio/apim-gateway:${GRAVITEEIO_VERSION_MAJOR}${DOCKER_TAG_SUFFIX}"
                        DOCKER_BUILD_MANAGEMENT_API_TAG+=" -t graviteeio/apim-management-api:${GRAVITEEIO_VERSION_MAJOR}${DOCKER_TAG_SUFFIX}"
                        DOCKER_BUILD_MANAGEMENT_UI_TAG+="  -t graviteeio/apim-management-ui:${GRAVITEEIO_VERSION_MAJOR}${DOCKER_TAG_SUFFIX}"
                        DOCKER_BUILD_PORTAL_UI_TAG+="      -t graviteeio/apim-portal-ui:${GRAVITEEIO_VERSION_MAJOR}${DOCKER_TAG_SUFFIX}"

                        # only create "latest" tag for Community Edition and if it's the latest version (obviously)
                        if [ "<< parameters.enterprise_edition >>" == "false" ]; then
                          DOCKER_BUILD_GATEWAY_TAG+="        -t graviteeio/apim-gateway:latest"
                          DOCKER_BUILD_MANAGEMENT_API_TAG+=" -t graviteeio/apim-management-api:latest"
                          DOCKER_BUILD_MANAGEMENT_UI_TAG+="  -t graviteeio/apim-management-ui:latest"
                          DOCKER_BUILD_PORTAL_UI_TAG+="      -t graviteeio/apim-portal-ui:latest"
                        fi
                      fi

                      docker build ${DOCKER_BUILD_ARGS} --quiet ${DOCKER_BUILD_GATEWAY_TAG} ./gravitee-apim-gateway/docker
                      docker build ${DOCKER_BUILD_ARGS} --quiet ${DOCKER_BUILD_MANAGEMENT_API_TAG} ./gravitee-apim-rest-api/docker
                      docker build ${DOCKER_BUILD_ARGS} --quiet ${DOCKER_BUILD_MANAGEMENT_UI_TAG} ./gravitee-apim-console-webui/docker        
                      docker build ${DOCKER_BUILD_ARGS} --quiet ${DOCKER_BUILD_PORTAL_UI_TAG} ./gravitee-apim-portal-webui/docker

                      docker image ls

                      # Login to DockerHub
                      docker login --username="${DOCKERHUB_BOT_USER_NAME}" -p="${DOCKERHUB_BOT_USER_TOKEN}"

                      # Push all tags if not dry-run mode
                      if [ "<< parameters.dry_run >>" == "false" ]; then                    
                        docker push --all-tags graviteeio/apim-management-api
                        docker push --all-tags graviteeio/apim-gateway
                        docker push --all-tags graviteeio/apim-management-ui
                        docker push --all-tags graviteeio/apim-portal-ui
                      fi

                      # Docker logout
                      docker logout

    nexus-staging:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: medium

        steps:
            - run:
                  name: Get tag to release from bucket name
                  command: |
                      export APIM_TAG=$(echo << pipeline.parameters.s3_bucket_name >> | sed 's/prepared-nexus-staging-gravitee-apim-//' | sed 's/_/./g')
                      echo "export APIM_TAG=$APIM_TAG" >> $BASH_ENV
            - run:
                  name: Checkout APIM with the tag
                  command: |
                      mkdir project
                      cd project
                      git clone --depth 1 --branch $APIM_TAG $CIRCLE_REPOSITORY_URL .
            - run:
                  name: Create .apim-version file for cache
                  command: |
                      # the previous cache key was computed with the SNAPSHOT version of the release. 
                      echo "${APIM_TAG}-SNAPSHOT" > .apim-version.txt
            - restore-maven-cache
            - attach_workspace:
                  at: .
            - prepare-gpg
            - run:
                  name: Release on Nexus
                  command: |
                      mvn clean deploy --activate-profiles gravitee-release --batch-mode -DskipTests -Dskip.validation=true --settings .gravitee.settings.xml --update-snapshots

workflows:
    pull_requests:
        when:
            and:
                - equal: [pull_requests, << pipeline.parameters.gio_action >>]
        jobs:
            - setup:
                  context: cicd-orchestrator
            - validate:
                  context: gravitee-qa
                  requires:
                      - setup
            - build:
                  context: gravitee-qa
                  requires:
                      - validate
            - test:
                  requires:
                      - build
            - test-repository:
                    requires:
                        - build
            - sonarcloud-analysis:
                  name: Sonar - << matrix.working_directory >>
                  matrix:
                      parameters:
                          working_directory:
                              - gravitee-apim-rest-api
                              - gravitee-apim-repository
                              - gravitee-apim-gateway
                  context: cicd-orchestrator
                  requires:
                      - test
                      - test-repository
            - publish-on-artifactory:
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
                              - fix-nexus-pb
                  requires:
                      - test
                      - test-repository
            - publish-on-nexus:
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
                              - fix-nexus-pb
                  requires:
                      - test
                      - test-repository
            - publish-images-azure-registry:
                  context: cicd-orchestrator
                  requires:
                      - test
                      - test-repository
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/username
                            var-name: AZURE_DOCKER_REGISTRY_USERNAME
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/password
                            var-name: AZURE_DOCKER_REGISTRY_PASSWORD
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
            - webui-lint-test:
                  name: Lint & Test APIM Console
                  apim-ui-project: gravitee-apim-console-webui
                  requires:
                      - setup
            - console-webui-build-storybook:
                  name: Build Console Storybook
                  requires:
                      - setup
            - console-webui-chromatic-deployment:
                  context: cicd-orchestrator
                  requires:
                      - Build Console Storybook
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/github_personal_access_token
                            var-name: GITHUB_TOKEN
            - webui-build:
                  name: Build APIM Console
                  apim-ui-project: gravitee-apim-console-webui
                  requires:
                      - setup
            - console-webui-deploy-on-azure-storage:
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/application-id
                            var-name: AZURE_APPLICATION_ID
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/tenant
                            var-name: AZURE_TENANT
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/application-secret
                            var-name: AZURE_APPLICATION_SECRET
                  requires:
                      - Build APIM Console
            - console-webui-comment-pr-after-deployment:
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/github_personal_access_token
                            var-name: GITHUB_TOKEN
                  requires:
                      - console-webui-deploy-on-azure-storage
            - webui-publish-images-azure-registry:
                  name: Build and publish APIM Console docker image
                  apim-ui-project: gravitee-apim-console-webui
                  docker-image-name: apim-management-ui
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/username
                            var-name: AZURE_DOCKER_REGISTRY_USERNAME
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/password
                            var-name: AZURE_DOCKER_REGISTRY_PASSWORD
                  requires:
                      - Build APIM Console
                      - setup
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
            - webui-lint-test:
                  name: Lint & Test APIM Portal
                  apim-ui-project: gravitee-apim-portal-webui
                  resource-class: large
                  requires:
                      - setup
            - sonarcloud-analysis:
                  name: Sonar - << matrix.working_directory >>
                  matrix:
                      parameters:
                          working_directory:
                              - gravitee-apim-console-webui
                              - gravitee-apim-portal-webui
                  context: cicd-orchestrator
                  requires:
                      - Lint & Test APIM Console
                      - Lint & Test APIM Portal
            - webui-build:
                  name: Build APIM Portal
                  apim-ui-project: gravitee-apim-portal-webui
                  requires:
                      - setup
            - webui-publish-images-azure-registry:
                  name: Build and publish APIM Portal docker image
                  apim-ui-project: gravitee-apim-portal-webui
                  docker-image-name: apim-portal-ui
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/username
                            var-name: AZURE_DOCKER_REGISTRY_USERNAME
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/password
                            var-name: AZURE_DOCKER_REGISTRY_PASSWORD
                  requires:
                      - Build APIM Portal
                      - setup
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
            - deploy-on-azure-cluster:
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/application-id
                            var-name: AZURE_APPLICATION_ID
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/tenant
                            var-name: AZURE_TENANT
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/application-secret
                            var-name: AZURE_APPLICATION_SECRET
                  requires:
                      - publish-images-azure-registry
                      - Build and publish APIM Console docker image
                      - Build and publish APIM Portal docker image
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
                  # To be modified when testing strategy will be defined
            - cypress-install:
                  requires:
                      - build
            - cypress-lint-test:
                  requires:
                      - cypress-install

    build_docker_images:
        when:
            equal: [build_docker_images, << pipeline.parameters.gio_action >>]
        jobs:
            - publish_prod_docker_images:
                  graviteeio_version: << pipeline.parameters.graviteeio_version >>
                  docker_tag_as_latest: << pipeline.parameters.docker_tag_as_latest >>
                  dry_run: << pipeline.parameters.dry_run >>
                  enterprise_edition: false
                  context: cicd-orchestrator
                  name: Build and push docker images for APIM CE << pipeline.parameters.graviteeio_version >><<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/infra/dockerhub-user-name
                            var-name: DOCKERHUB_BOT_USER_NAME
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/infra/dockerhub-user-token
                            var-name: DOCKERHUB_BOT_USER_TOKEN
            - publish_prod_docker_images:
                  graviteeio_version: << pipeline.parameters.graviteeio_version >>
                  docker_tag_as_latest: << pipeline.parameters.docker_tag_as_latest >>
                  dry_run: << pipeline.parameters.dry_run >>
                  enterprise_edition: true
                  context: cicd-orchestrator
                  name: Build and push docker images for APIM EE << pipeline.parameters.graviteeio_version >><<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/infra/dockerhub-user-name
                            var-name: DOCKERHUB_BOT_USER_NAME
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/infra/dockerhub-user-token
                            var-name: DOCKERHUB_BOT_USER_TOKEN

    release:
        when:
            equal: [release, << pipeline.parameters.gio_action >>]
        jobs:
            # Prepare
            - setup:
                  context: cicd-orchestrator

            # APIM Portal
            - webui-lint-test:
                  name: Lint & Test APIM Portal
                  apim-ui-project: gravitee-apim-portal-webui
                  resource-class: large
                  requires:
                      - setup
            - webui-build:
                  name: Build APIM Portal
                  apim-ui-project: gravitee-apim-portal-webui
                  requires:
                      - setup
            - webui-publish-artifactory:
                  name: Publish APIM Portal to artifactory
                  apim-ui-project: gravitee-apim-portal-webui
                  requires:
                      - Build APIM Portal
                      - Lint & Test APIM Portal

            # APIM Console
            - webui-lint-test:
                  name: Lint & Test APIM Console
                  apim-ui-project: gravitee-apim-console-webui
                  resource-class: large
                  requires:
                      - setup
            - webui-build:
                  name: Build APIM Console
                  apim-ui-project: gravitee-apim-console-webui
                  requires:
                      - setup
            - webui-publish-artifactory:
                  name: Publish APIM Console to artifactory
                  apim-ui-project: gravitee-apim-console-webui
                  requires:
                      - Build APIM Console
                      - Lint & Test APIM Console

            # APIM Backend
            - backend-build-and-publish-artifactory:
                  name: Backend build and publish to artifactory
                  requires:
                      - setup
                  context: cicd-orchestrator

            # Commit and set next version
            - release-commit-and-prepare-next-version:
                  name: Commit and prepare next version
                  requires:
                      - Backend build and publish to artifactory
                      - Publish APIM Console to artifactory
                      - Publish APIM Portal to artifactory
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/git/user/name
                            var-name: GIT_USER_NAME
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/git/user/email
                            var-name: GIT_USER_EMAIL

    # ---
    # Workflow For APIM Orchestrated Nexus Staging
    nexus_staging:
        when:
            equal: [nexus_staging, << pipeline.parameters.gio_action >>]
        jobs:
            - setup:
                  context: cicd-orchestrator
            - nexus-staging:
                  context: cicd-orchestrator
                  requires:
                      - setup
